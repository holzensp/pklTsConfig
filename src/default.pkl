module TsConfig.Default

import "schema.pkl" as Schema

import "transpiling.pkl" as Transpiling
import "nottranspiling.pkl" as NotTranspiling
import "library.pkl" as Library
import "notdom.pkl" as NotDom

hidden config: Schema.CompilerOptionsSchema = new {
  useLibrary = false
  useTranspiling = true
}

hidden fixed useBaseOrStrictest = useBase || useStrictest
hidden fixed useStrictOrStrictest = useStrict || useStrictest
hidden fixed useStrictOrDom = useStrict || useDom
hidden fixed useStrictOrStrictestOrDom = useStrictOrDom || useStrictest

/// Use the 'Base' configuration from TotallyTypescript's definitions. Recommended.
hidden useBase: Boolean = true
esModuleInterop: Boolean(useBase)? = if (!useBase) null else true
skipLibCheck: Boolean(useBase)? = if (!useBase) null else true
target: String(useBase)? = if (!useBase) null else "es2022"
allowJs: Boolean(useBase)? = if (!useBase) null else true
resolveJsonModule: Boolean(useBase)? = if (!useBase) null else true
moduleDetection: String(useBase)? = if (!useBase) null else "force"
isolatedModules: Boolean(useBaseOrStrictest)? = if (!useBaseOrStrictest) null else true

/// Use the 'Strict' configuration from TotallyTypescript's definitions. Recommended.
hidden useStrict: Boolean = true
strict: Boolean(useStrictOrDom)? = if (!useStrictOrDom) null else true
noUncheckedIndexedAccess: Boolean(useStrictOrStrictestOrDom)? = if (!useStrictOrStrictestOrDom) null else true

/// Use the 'Strictest' configuration from TotallyTypescript's definitions. Not recommended.
hidden useStrictest: Boolean = false
allowUnusedLabels: Boolean(useStrictest)? = if (!useStrictest) null else false
allowUnreachableCode: Boolean(useStrictest)? = if (!useStrictest) null else false
exactOptionalPropertyTypes: Boolean(useStrictest)? = if (!useStrictest) null else true
noFallthroughCasesInSwitch: Boolean(useStrictest)? = if (!useStrictest) null else true
noImplicitOverride: Boolean(useStrictest)? = if (!useStrictest) null else true
noImplicitReturns: Boolean(useStrictest)? = if (!useStrictest) null else true
noPropertyAccessFromIndexSignature: Boolean(useStrictest)? = if (!useStrictest) null else true
noUnusedLocals: Boolean(useStrictest)? = if (!useStrictest) null else true
noUnusedParameters: Boolean(useStrictest)? = if (!useStrictest) null else true
checkJs: Boolean(useStrictest)? = if (!useStrictest) null else true
forceConsistentCasingInFileNames: Boolean(useStrictest)? = if (!useStrictest) null else true

/// Use the 'Dom' configuration from TotallyTypescript's definitions. Optional.
hidden useDom: Boolean = true

/// Use the 'Monorepo' configuration from TotallyTypescript's definitions. Optional.
hidden useMonorepo: Boolean = false
declarationMap: Boolean(useMonorepo)? = if (!useMonorepo) null else true
declarationDir: String(useMonorepo)? = if (!useMonorepo) null else "dist"
emitDeclarationOnly: Boolean(useMonorepo)? = if (!useMonorepo) null else true


hidden root: Schema.RootSchema

hidden amend: Schema.AmendSchema

hidden outputFileName:Schema.ValidOutputFileName = "tsconfig.json"

hidden fixed aggregatedConfig = new Mapping {
  local items = new Listing {
    module
    when (config.useLibrary) { new Library {} }
    when (config.useTranspiling) { new Transpiling {} }
    when (!config.useTranspiling) { new NotTranspiling {} }
    when (!useDom) { new NotDom {} }
  }.fold(Map(), (acc, it) -> acc + it.toMap())

  ["compilerOptions"] =
    new Mapping {
      for(name, value in items) {
        [name] = if (!amend.isEmpty && amend.getOrNull(name) != null )
                    amend.getOrNull(name)
                 else
                    value
      }
      when(!amend.isEmpty) {
        for (name, value in amend) {
          when (items.getOrNull(name) == null) {
            [name] = value
          }
        }
      }
    }
  when (root.`extends` != "") { ["extends"] = root.`extends` }
  when (!root.files.isEmpty) { ["files"] = root.files }
  when (!root.include.isEmpty) { ["include"] = root.include }
  when (!root.exclude.isEmpty) { ["exclude"] = root.exclude }
}

output {
  renderer = new JsonRenderer {
    converters {
      [Boolean] = (it) -> "\(it)"
      [List] = (it) -> "[\(it[0])]"
    }
  }
  value = aggregatedConfig
  files {
    [if (outputFileName == "tsconfig.json") "totally_tsconfig.json" else outputFileName] = output
  }
}