module TsConfig.Default

import "schema.pkl" as Schema
import "render.pkl" as Render

config = new Schema.CompilerOptionsSchema{
  useBase = true
  useStrict = true
  useStrictest = false
  useDom = true
  useMonorepo = false
  useLibrary = false
  useTranspiling = true
}

root = new Schema.RootSchema {
  files = new Listing {}
  include = new Listing {}
  exclude = new Listing {}
}

amend = new Schema.AmendSchema { }

outputFileName:Schema.ValidOutputFileName = "tsconfig.json"

fixed aggregatedConfig = new Mapping {
  ["compilerOptions"] = let (items = Render.runTsConfig(config))
    new Mapping {
      for(name, value in items) {
        [name] = if (!amend.isEmpty && amend.getOrNull(name) != null )
                    Render.renderElement(amend.getOrNull(name))
                 else
                    Render.renderElement(value)
      }
      when(!amend.isEmpty) {
        for (name, value in amend) {
          when (items.getOrNull(name) == null) {
            [name] = Render.renderElement(value)
          }
        }
      }
    }
  when (root.`extends` != "") { ["extends"] = root.`extends` }
  when (!root.files.isEmpty) { ["files"] = root.files }
  when (!root.include.isEmpty) { ["include"] = root.include }
  when (!root.exclude.isEmpty) { ["exclude"] = root.exclude }
}

output {
  renderer = new JsonRenderer {}
  value = aggregatedConfig
  files {
    [if (outputFileName == "tsconfig.json") "totally_tsconfig.json" else outputFileName] = output
  }
}