module TsConfig.Default

import "schema.pkl" as Schema
import "render.pkl" as Render

import "base.pkl" as Base
import "strict.pkl" as Strict
import "strictest.pkl" as Strictest
import "transpiling.pkl" as Transpiling
import "nottranspiling.pkl" as NotTranspiling
import "library.pkl" as Library
import "monorepo.pkl" as Monorepo
import "dom.pkl" as Dom
import "notdom.pkl" as NotDom

config = new Schema.CompilerOptionsSchema{
  useBase = true
  useStrict = true
  useStrictest = false
  useDom = true
  useMonorepo = false
  useLibrary = false
  useTranspiling = true
}

root = new Schema.RootSchema {
  files = new Listing {}
  include = new Listing {}
  exclude = new Listing {}
}

amend = new Schema.AmendSchema { }

outputFileName:Schema.ValidOutputFileName = "tsconfig.json"

fixed aggregatedConfig = new Mapping {
  local items =
    Base.addBaseItems(Base.Base, config.useBase) +
    Dom.addDomItems(Dom.Dom, config.useDom) +
    Strict.addStrictItems(Strict.Strict, config.useStrict) +
    Strictest.addStrictestItems(Strictest.Strictest, config.useStrictest) +
    Library.addLibraryItems(Library.Library, config.useLibrary) +
    Monorepo.addMonorepoItems(Monorepo.Monorepo, config.useMonorepo) +
    Transpiling.addTranspilingItems(Transpiling.Transpiling, config.useTranspiling) +
    NotTranspiling.addNotTranspilingItems(NotTranspiling.NotTranspiling, !config.useTranspiling) +
    NotDom.addNotDomItems(NotDom.NotDom, !config.useDom)

  ["compilerOptions"] =
    new Mapping {
      for(name, value in items) {
        [name] = if (!amend.isEmpty && amend.getOrNull(name) != null )
                    Render.renderElement(amend.getOrNull(name))
                 else
                    Render.renderElement(value)
      }
      when(!amend.isEmpty) {
        for (name, value in amend) {
          when (items.getOrNull(name) == null) {
            [name] = Render.renderElement(value)
          }
        }
      }
    }
  when (root.`extends` != "") { ["extends"] = root.`extends` }
  when (!root.files.isEmpty) { ["files"] = root.files }
  when (!root.include.isEmpty) { ["include"] = root.include }
  when (!root.exclude.isEmpty) { ["exclude"] = root.exclude }
}

output {
  renderer = new JsonRenderer {}
  value = aggregatedConfig
  files {
    [if (outputFileName == "tsconfig.json") "totally_tsconfig.json" else outputFileName] = output
  }
}