module TsConfig.Default

import "schema.pkl" as Schema
import "CompilerOptions.pkl"

typealias TTSConfig =
  "Base"
  |"Strict"
  |"Strictest"
  |"Dom"
  |"Library"
  |"Monorepo"
  |"Transpiling"

typealias TTSConfigNegated =
  "NotBase"
  |"NotStrict"
  |"NotStrictest"
  |"NotDom"
  |"NotLibrary"
  |"NotMonorepo"
  |"NotTranspiling"

typealias TotallyTypescriptConfiguration = TTSConfig|TTSConfigNegated

hidden totallyTypescriptConfigurations: Listing<TotallyTypescriptConfiguration> = new {
  "Base"
  "Strict"
  "Dom"
  "Transpiling"
}

local ttsConfig: Set<TTSConfig> =
  totallyTypescriptConfigurations.fold(
    Map(),
    (acc, it) -> if (it.startsWith("Not")) acc.put(it.drop(3), false) else acc.put(it, true)
  ).filter((_, it) -> it).keys

local useBase: Boolean = ttsConfig.contains("Base")
local useStrict: Boolean = ttsConfig.contains("Strict")
local useStrictest: Boolean = ttsConfig.contains("Strictest")
local useDom: Boolean = ttsConfig.contains("Dom")
local useLibrary: Boolean = ttsConfig.contains("Library")
local useMonorepo: Boolean = ttsConfig.contains("Monorepo")
local useTranspiling: Boolean = ttsConfig.contains("Transpiling")

local useBaseOrStrictest = useBase || useStrictest
local useStrictOrDom = useStrict || useDom
local useStrictOrStrictestOrDom = useStrictOrDom || useStrictest

compilerOptions: CompilerOptions = new {
  esModuleInterop = if (!useBase) null else true
  skipLibCheck = if (!useBase) null else true
  target = if (!useBase) null else "es2022"
  allowJs = if (!useBase) null else true
  resolveJsonModule = if (!useBase) null else true
  moduleDetection = if (!useBase) null else "force"
  isolatedModules = if (!useBaseOrStrictest) null else true

  strict = if (!useStrictOrDom) null else true
  noUncheckedIndexedAccess = if (!useStrictOrStrictestOrDom) null else true

  allowUnusedLabels = if (!useStrictest) null else false
  allowUnreachableCode = if (!useStrictest) null else false
  exactOptionalPropertyTypes = if (!useStrictest) null else true
  noFallthroughCasesInSwitch = if (!useStrictest) null else true
  noImplicitOverride = if (!useStrictest) null else true
  noImplicitReturns = if (!useStrictest) null else true
  noPropertyAccessFromIndexSignature = if (!useStrictest) null else true
  noUnusedLocals = if (!useStrictest) null else true
  noUnusedParameters = if (!useStrictest) null else true
  checkJs = if (!useStrictest) null else true
  forceConsistentCasingInFileNames = if (!useStrictest) null else true

  declaration = if (!useLibrary) null else true

  declarationMap = if (!useMonorepo) null else true
  declarationDir = if (!useMonorepo) null else "dist"
  emitDeclarationOnly = if (!useMonorepo) null else true

  `module` = if (!useTranspiling) "preserve" else "NodeNext"
  outDir = if (!useTranspiling) null else "dist"
  noEmit = if (useTranspiling) null else true

  lib = if (useDom) null else List("es2022")
}


hidden root: Schema.RootSchema

hidden amend: Schema.AmendSchema

hidden outputFileName:Schema.ValidOutputFileName = "tsconfig.json"

hidden fixed aggregatedConfig = (module.toDynamic()) {
  compilerOptions = (module.compilerOptions.toMap().toMapping()) {
    ...amend
  }
  ...root.toMap()
}

output {
  renderer = new JsonRenderer {
    converters {
      [Boolean] = (it) -> "\(it)"
      [List] = (it) -> "[\(it[0])]"
      [Listing] = (it) -> if (it.isEmpty) null else it
    }
  }
  value = aggregatedConfig
  files {
    [if (outputFileName == "tsconfig.json") "totally_tsconfig.json" else outputFileName] = output
  }
}