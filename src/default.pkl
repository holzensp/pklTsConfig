module TsConfig.Default

import "schema.pkl" as Schema
import "CompilerOptions.pkl"

typealias TTSConfig =
  "Base"
  |"Strict"
  |"Strictest"
  |"Dom"
  |"Library"
  |"Monorepo"
  |"Transpiling"

typealias TTSConfigNegated =
  "NotBase"
  |"NotStrict"
  |"NotStrictest"
  |"NotDom"
  |"NotLibrary"
  |"NotMonorepo"
  |"NotTranspiling"

typealias TotallyTypescriptConfiguration = TTSConfig|TTSConfigNegated

hidden totallyTypescriptConfigurations: Listing<TotallyTypescriptConfiguration> = new {
  "Base"
  "Strict"
  "Dom"
  "Transpiling"
}

local ttsConfig: Set<TTSConfig> =
  totallyTypescriptConfigurations.fold(
    Map(),
    (acc, it) -> if (it.startsWith("Not")) acc.put(it.drop(3), false) else acc.put(it, true)
  ).filter((_, it) -> it).keys

local useBase: Boolean = ttsConfig.contains("Base")
local useStrict: Boolean = ttsConfig.contains("Strict")
local useStrictest: Boolean = ttsConfig.contains("Strictest")
local useDom: Boolean = ttsConfig.contains("Dom")
local useLibrary: Boolean = ttsConfig.contains("Library")
local useMonorepo: Boolean = ttsConfig.contains("Monorepo")
local useTranspiling: Boolean = ttsConfig.contains("Transpiling")

compilerOptions: CompilerOptions = new {
  when (useBase) {
    esModuleInterop = true
    skipLibCheck = true
    target = "es2022"
    allowJs = true
    resolveJsonModule = true
    moduleDetection = "force"
  }

  when (useBase || useStrictest) {
    isolatedModules = true
  }

  when (useStrict || useDom) {
    strict = true
  }

  when (useStrict || useStrictest || useDom) {
    noUncheckedIndexedAccess = true
  }

  when (useStrictest) {
    allowUnusedLabels = false
    allowUnreachableCode = false
    exactOptionalPropertyTypes = true
    noFallthroughCasesInSwitch = true
    noImplicitOverride = true
    noImplicitReturns = true
    noPropertyAccessFromIndexSignature = true
    noUnusedLocals = true
    noUnusedParameters = true
    checkJs = true
    forceConsistentCasingInFileNames = true
  }

  when (useLibrary) {
    declaration = true
  }

  when (useMonorepo) {
    declarationMap = true
    declarationDir = "dist"
    emitDeclarationOnly = true
  }

  when (useTranspiling) {
    `module` = "NodeNext"
    outDir = "dist"
  } else {
    `module` = "preserve"
    noEmit = true
  }

  when (!useDom) {
    lib = List("es2022")
  }
}


hidden root: Schema.RootSchema

hidden outputFileName:Schema.ValidOutputFileName = "tsconfig.json"

hidden fixed aggregatedConfig = (module.toDynamic()) {
  ...root.toMap()
}

output {
  renderer = new JsonRenderer {
    converters {
      [Boolean] = (it) -> "\(it)"
      [List] = (it) -> "[\(it[0])]"
      [Listing] = (it) -> if (it.isEmpty) null else it
    }
  }
  value = aggregatedConfig
  files {
    [if (outputFileName == "tsconfig.json") "totally_tsconfig.json" else outputFileName] = output
  }
}